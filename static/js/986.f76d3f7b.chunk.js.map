{"version":3,"file":"static/js/986.f76d3f7b.chunk.js","mappings":"mPAEaA,EAAgBC,EAAAA,EAAAA,KAAH,wQAabC,EAAQD,EAAAA,EAAAA,MAAH,4KAYLE,EAAOF,EAAAA,EAAAA,IAAH,iHAMJG,EAASH,EAAAA,EAAAA,OAAH,2SAgBNI,EAAQJ,EAAAA,EAAAA,MAAH,0Q,8BCjDLK,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAnB,E,UCcjB,SAASC,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXR,GAAWS,EAAAA,EAAAA,IAAYX,GAEvBY,EAAoB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnBR,EAAgBQ,EAAhBR,KAAMS,EAAUD,EAAVC,MAEd,OAAQT,GACN,IAAK,OACHC,EAAQQ,GACR,MAEF,IAAK,SACHN,EAAUM,GACV,MAEF,QACE,OAEL,EA6CKC,EAAQ,WACZT,EAAQ,IACRE,EAAU,GACX,EAED,OACE,SAACd,EAAD,CAAesB,SAjDE,SAAAC,GACjBA,EAAMC,iBAEN,IAAMC,EAAa,CACjBd,KAAAA,EACAE,OAAAA,GASF,GANgBL,EAASkB,MACvB,SAAAC,GAAO,OACLA,EAAQhB,KAAKiB,gBAAkBjB,EAAKiB,eACpCD,EAAQd,SAAWA,CAFd,IAaP,OAPAQ,SACAQ,EAAAA,OAAAA,KAAA,UAAelB,EAAf,2BAA8C,CAC5CmB,SAAU,aACVC,KAAM,CACJC,WAAY,eAMlBjB,GAASkB,EAAAA,EAAAA,IAAgBR,IACtBS,MAAK,WACJL,EAAAA,OAAAA,QAAe,6BAA8B,CAC3CC,SAAU,aACVK,cAAc,EACdC,QAAS,CACPJ,WAAY,cAGjB,IACAK,OAAM,WACLR,EAAAA,OAAAA,QAAe,gCAAiC,CAC9CC,SAAU,cAEb,IACHT,GACD,EAQC,UACE,4BACE,UAACnB,EAAD,YACE,SAACC,EAAD,WACE,SAAC,MAAD,CAAkBmC,KAAK,UAGzB,SAACjC,EAAD,CACEe,MAAOT,EACP4B,SAAUrB,EACVsB,KAAK,OACL7B,KAAK,OACL8B,QAAQ,2HACRC,MAAM,yIACNC,UAAQ,QAGZ,UAACzC,EAAD,YACE,SAACC,EAAD,WACE,SAAC,MAAD,CAAqBmC,KAAK,UAG5B,SAACjC,EAAD,CACEe,MAAOP,EACP0B,SAAUrB,EACVsB,KAAK,MACL7B,KAAK,SACL8B,QAAQ,yBACRC,MAAM,+FACNC,UAAQ,QAGZ,SAACvC,EAAD,CAAQoC,KAAK,SAAb,6BAIP,C,kBCxHYI,EAAc3C,EAAAA,EAAAA,GAAH,qgCAqDX4C,EAAY5C,EAAAA,EAAAA,OAAH,+T,wCC/ChB6C,EAAYC,SAASC,cAAc,eAuDzC,MArDA,YAAoD,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,SAAUvB,EAAW,EAAXA,QAChCZ,GAAWC,EAAAA,EAAAA,MACjB,GAAwBN,EAAAA,EAAAA,UAASiB,EAAQhB,MAAzC,eAAOA,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAASiB,EAAQd,QAA7C,eAAOA,EAAP,KAAeC,EAAf,KA6BA,OAAOqC,EAAAA,EAAAA,eACL,UAAC,IAAD,CACEC,KAAMH,EACNP,MAAM,eACNQ,SAAUA,EACVG,OAAQ,EACN,SAAC,KAAD,CAAqBC,QAASJ,EAA9B,mBAAY,WAGZ,SAAC,KAAD,CAAmBV,KAAK,UAAUc,QApCrB,WACJ,KAAT3C,GAA0B,KAAXE,GAOnBE,GAASwC,EAAAA,EAAAA,IAAiB,CAAEC,GAAI7B,EAAQ6B,GAAI7C,KAAAA,EAAME,OAAAA,KAC/CqB,MAAK,WACJL,EAAAA,OAAAA,QAAe,UAAW,CACxBC,SAAU,aACVK,cAAc,EACdsB,QAAS,KACTrB,QAAS,CACPJ,WAAY,cAGjB,IACAK,OAAM,WACLR,EAAAA,OAAAA,QAAe,gCAAiC,CAC9CC,SAAU,cAEb,IACHoB,KAtBErB,EAAAA,OAAAA,QAAe,oDAAqD,CAClEC,SAAU,cAsBf,EAWK,iBAAY,SARhB,WAaE,SAAC,IAAD,CAAOV,MAAOT,EAAM4B,SAAU,SAAAmB,GAAC,OAAI9C,EAAQ8C,EAAEvC,OAAOC,MAArB,KAC/B,SAAC,IAAD,CAAOA,MAAOP,EAAQ0B,SAAU,SAAAmB,GAAC,OAAI5C,EAAU4C,EAAEvC,OAAOC,MAAvB,OAEnC0B,EAEH,ECLD,I,IAAA,EA/CA,YAAwC,IAArBU,EAAoB,EAApBA,GAAI7C,EAAgB,EAAhBA,KAAME,EAAU,EAAVA,OAC3B,GAA4CH,EAAAA,EAAAA,WAAS,GAArD,eAAOiD,EAAP,KAAuBC,EAAvB,KACM7C,GAAWC,EAAAA,EAAAA,MA8BjB,OACE,UAAC4B,EAAD,CAAaY,GAAIA,EAAjB,WACE,uBAAI7C,KACJ,4BACE,uBAAIE,KACJ,SAACgC,EAAD,CAAWL,KAAK,SAASc,QAjCb,WAChBM,GAAkB,EACnB,EA+BK,UAA6C,SAAC,MAAD,OAC7C,SAAC,EAAD,CAAWX,QAASU,EAAgBT,SA9BvB,WACjBU,GAAkB,EACnB,EA4B+DjC,QAAS,CAAC6B,GAAAA,EAAI7C,KAAAA,EAAME,OAAAA,MAC9E,SAACgC,EAAD,CAAWL,KAAK,SAASc,QAAS,kBA3BlBO,EA2BsCL,OA1B1DzC,GAAS+C,EAAAA,EAAAA,IAAmBD,IACzB3B,MAAK,WACJL,EAAAA,OAAAA,QAAe,UAAW,CACxBC,SAAU,aACVK,cAAc,EACdsB,QAAS,KACTrB,QAAS,CACPJ,WAAY,cAGjB,IACAK,OAAM,WACLR,EAAAA,OAAAA,QAAe,gCAAiC,CAC9CC,SAAU,cAEb,IAhBiB,IAAA+B,CA2BkB,EAAlC,UACE,SAAC,MAAD,WAKT,ECpDYE,EAAY9D,EAAAA,EAAAA,GAAH,kTAcT+D,EAAK/D,EAAAA,EAAAA,GAAH,iJ,UCbFgE,EAAoB,SAAA1D,GAAK,OAAIA,EAAM2D,OAAOA,OAAOtC,aAAxB,EAEzBuC,GAAyBC,EAAAA,EAAAA,IACpC,CAAC9D,EAAa2D,IACd,SAACzD,EAAU6D,GAAX,OACE7D,EAAS0D,QAAO,SAAAvC,GAAO,OAAIA,EAAQhB,KAAKiB,cAAc0C,SAASD,EAAxC,GADzB,IC2BF,I,IAAA,EAzBA,WACE,IAAME,GAAmBtD,EAAAA,EAAAA,IAAYkD,GAC/BpD,GAAWC,EAAAA,EAAAA,MAUjB,OARAwD,EAAAA,EAAAA,YAAU,WACRzD,GAAS0D,EAAAA,EAAAA,OAAsBpC,OAAM,WACnCR,EAAAA,OAAAA,QAAe,uCAAwC,CACrDC,SAAU,cAEb,GACF,GAAE,CAACf,KAGF,SAACgD,EAAD,UAC+B,IAA5BQ,EAAiBG,OAChBH,EAAiBI,KAAI,YAA2B,IAAxBhE,EAAuB,EAAvBA,KAAME,EAAiB,EAAjBA,OAAQ2C,EAAS,EAATA,GACpC,OAAO,SAAC,EAAD,CAAkB7C,KAAMA,EAAME,OAAQA,EAAQ2C,GAAIA,GAApCA,EACtB,KAED,SAACQ,EAAD,qCAIP,E,UC9BY9D,EAAQD,EAAAA,EAAAA,MAAH,yLAYL2E,EAAc3E,EAAAA,EAAAA,MAAH,2S,UCqBxB,MA5BA,WACE,IAAMc,GAAWC,EAAAA,EAAAA,MACXqD,GAAcpD,EAAAA,EAAAA,IAAYgD,GAUhC,OACE,UAAC,EAAD,YACE,SAACW,EAAD,CACExD,MAAOiD,EACP7B,KAAK,OACLqC,YAAY,qBACZpC,QAAQ,2HACR9B,KAAK,SACL4B,SAhBqB,SAAAhB,GACzBR,GAAS+D,EAAAA,EAAAA,GAAUvD,EAAMwD,cAAc3D,OACxC,KAgBKiD,IAAe,SAAC,MAAD,CAAU/B,KAAK,OAC/B+B,IAAe,SAAC,MAAD,CAAK/B,KAAK,KAAKgB,QAff,WAClBvC,GAAS+D,EAAAA,EAAAA,GAAU,IACpB,MAgBF,ECnBD,MAVA,WACE,OACE,iCACE,SAACrE,EAAD,KACA,SAAC,EAAD,KACA,SAAC,EAAD,MAGL,C","sources":["components/ContactForm/ContactForm.styled.jsx","redax/contacts/contactSelectors.js","components/ContactForm/ContactForm.jsx","components/Contact/Сontact.styled.jsx","components/Modal/EditModal.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.jsx","redax/filter/filterSelectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormContainer = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 550px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 4px;\n  align-items: center;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 10px;\n\n  :hover div {\n    color: #666;\n    transform: scale(1.2);\n  }\n`;\n\nexport const Icon = styled.div`\n  color: #999;\n  font-size: 22px;\n  transition: color 0.3s ease, transform 0.3s ease;\n`;\n\nexport const Button = styled.button`\n  background-color: #ccc;\n  color: #666;\n  padding: 10px 20px;\n  margin-left: auto;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, color 0.3s ease;\n\n  &:hover {\n    background-color: #999;\n    color: #fff;\n  }\n`;\n\nexport const Input = styled.input`\n  padding: 10px 40px 10px 10px;\n  border: none;\n  border-radius: 4px;\n  outline: none;\n  font-size: 16px;\n  background-color: #ddd;\n  transition: background-color 0.3s ease;\n\n  &:hover,\n  &:focus {\n    background-color: #ccc;\n  }\n`;\n","export const getContacts = state => state.contacts.contacts;","import { useState } from 'react';\nimport { BsFillPersonFill, BsFillTelephoneFill } from 'react-icons/bs';\nimport {\n  FormContainer,\n  Label,\n  Input,\n  Icon,\n  Button,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { addContactAsync } from 'redax/contacts/contactsOperetions';\nimport { getContacts } from 'redax/contacts/contactSelectors';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleInputChange = ({ target }) => {\n    const { name, value } = target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const formSubmit = event => {\n    event.preventDefault();\n\n    const newContact = {\n      name,\n      number,\n    };\n\n    const isExist = contacts.some(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number\n    );\n\n    if (isExist) {\n      reset();\n      Notify.info(`${name} is already in contacts`, {\n        position: 'center-top',\n        info: {\n          background: '#738ddae4',\n        },\n      });\n      return;\n    }\n\n    dispatch(addContactAsync(newContact))\n      .then(() => {\n        Notify.success('Contact added successfully', {\n          position: 'center-top',\n          clickToClose: true,\n          success: {\n            background: '#9dbc89df',\n          },\n        });\n      })\n      .catch(() => {\n        Notify.failure('Somthing was wrong, try again', {\n          position: 'center-top',\n        });\n      });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormContainer onSubmit={formSubmit}>\n      <div>\n        <Label>\n          <Icon>\n            <BsFillPersonFill size=\"22\" />\n          </Icon>\n\n          <Input\n            value={name}\n            onChange={handleInputChange}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <Label>\n          <Icon>\n            <BsFillTelephoneFill size=\"22\" />\n          </Icon>\n\n          <Input\n            value={number}\n            onChange={handleInputChange}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?[0-9\\s\\-\\(\\)]+\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </div>\n    </FormContainer>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-around;\n  padding: 12px;\n  padding-left: 30px;\n  color: #555;\n  -webkit-tap-highlight-color: transparent;\n\n  :hover {\n    background: #fff;\n    outline: none;\n    position: relative;\n    background-color: #fff;\n    border-top-left-radius: 20px;\n    border-bottom-left-radius: 20px;\n  }\n\n  :hover::after {\n    content: '';\n    position: absolute;\n    background-color: transparent;\n    bottom: 100%;\n    right: 0;\n    height: 35px;\n    width: 35px;\n    border-bottom-right-radius: 18px;\n    box-shadow: 0 20px 0 0 #fff;\n  }\n\n  :hover::before {\n    content: '';\n    position: absolute;\n    background-color: transparent;\n    top: 38px;\n    right: 0;\n    height: 35px;\n    width: 35px;\n    border-top-right-radius: 18px;\n    box-shadow: 0 -20px 0 0 #fff;\n  }\n  p {\n    width: 140px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    font-size: 18px;\n  }\n\n  div {\n    display: flex;\n  }\n`;\n\nexport const DeleteBtn = styled.button`\n  display: flex;\n  width: 24px;\n  height: 24px;\n  justify-content: center;\n  align-items: center;\n  border: none;\n  cursor: pointer;\n  color: #555;\n  background-color: #ccc;\n  border-radius: 4px;\n  transition: background-color 0.3s ease;\n  :hover {\n    background-color: #999;\n  }\n`;\n","import { Button, Input, Modal } from 'antd';\nimport { Notify } from 'notiflix';\nimport { useState } from 'react';\n\nimport { createPortal } from 'react-dom';\nimport { useDispatch } from 'react-redux';\nimport { editContactAsync } from 'redax/contacts/contactsOperetions';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nfunction EditModal({ visible, onCancel, contact }) {\n  const dispatch = useDispatch();\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n\n  const handleSave = () => {\n    if (name === '' || number === '') {\n      Notify.failure('Fields can not be empty. Please, enter some value', {\n        position: 'center-top',\n      });\n      return;\n    }\n\n    dispatch(editContactAsync({ id: contact.id, name, number }))\n      .then(() => {\n        Notify.success('Updated', {\n          position: 'center-top',\n          clickToClose: true,\n          timeout: 1500,\n          success: {\n            background: '#9dbc89df',\n          },\n        });\n      })\n      .catch(() => {\n        Notify.failure('Somthing was wrong, try again', {\n          position: 'center-top',\n        });\n      });\n    onCancel();\n  };\n\n  return createPortal(\n    <Modal\n      open={visible}\n      title=\"Edit Contact\"\n      onCancel={onCancel}\n      footer={[\n        <Button key=\"cancel\" onClick={onCancel}>\n          Cancel\n        </Button>,\n        <Button key=\"save\" type=\"primary\" onClick={handleSave}>\n          Save\n        </Button>,\n      ]}\n    >\n      <Input value={name} onChange={e => setName(e.target.value)} />\n      <Input value={number} onChange={e => setNumber(e.target.value)} />\n    </Modal>,\n    modalRoot\n  );\n}\n\nexport default EditModal;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { RiDeleteBin6Line, RiEdit2Line } from 'react-icons/ri';\nimport { ContactItem, DeleteBtn } from './Сontact.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContactAsync } from 'redax/contacts/contactsOperetions';\nimport { Notify } from 'notiflix';\nimport EditModal from 'components/Modal/EditModal';\n\nfunction Contact({ id, name, number }) {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  }\n\n  const closeModal = () => {\n    setIsModalVisible(false);\n  }\n\n  const removeContact = contactId => {\n    dispatch(deleteContactAsync(contactId))\n      .then(() => {\n        Notify.success('Deleted', {\n          position: 'center-top',\n          clickToClose: true,\n          timeout: 1500,\n          success: {\n            background: '#9dbc89df',\n          },\n        });\n      })\n      .catch(() => {\n        Notify.failure('Somthing was wrong, try again', {\n          position: 'center-top',\n        });\n      });\n  };\n\n\n  return (\n    <ContactItem id={id}>\n      <p>{name}</p>\n      <div>\n        <p>{number}</p>\n        <DeleteBtn type=\"button\" onClick={showModal}><RiEdit2Line /></DeleteBtn>\n        <EditModal visible={isModalVisible} onCancel={closeModal} contact={{id, name, number}} />\n        <DeleteBtn type=\"button\" onClick={() => removeContact(id)}>\n          <RiDeleteBin6Line />\n        </DeleteBtn>\n      </div>\n    </ContactItem>\n  );\n}\n\nexport default Contact;\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 500px;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  padding-left: 30px;\n  height: 100hv;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 16px;\n  background-image: linear-gradient(70deg, #d6d6d6, #f7f7f7);\n`;\n\nexport const H2 = styled.h2`\n  display: block;\n  text-align: center;\n  margin-bottom: 8px;\n  font-size: 24px;\n  color: #555;\n  cursor: default;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { getContacts } from 'redax/contacts/contactSelectors';\n\nexport const selectFilterValue = state => state.filter.filter.toLowerCase();\n\nexport const selectFilteredContacts = createSelector(\n  [getContacts, selectFilterValue],\n  (contacts, filterValue) =>\n    contacts.filter(contact => contact.name.toLowerCase().includes(filterValue))\n);\n","import React from 'react';\nimport Contact from 'components/Contact/Contact';\nimport { Container, H2 } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redax/filter/filterSelectors';\nimport { useEffect } from 'react';\nimport { fetchContactsAsync } from 'redax/contacts/contactsOperetions';\nimport { Notify } from 'notiflix';\n\nfunction ContactList() {\n  const filteredcontacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContactsAsync()).catch(() => {\n      Notify.failure('Somthing was wrong, refresh the page', {\n        position: 'center-top',\n      });\n    });\n  }, [dispatch]);\n\n  return (\n    <Container>\n      {filteredcontacts.length !== 0 ? (\n        filteredcontacts.map(({ name, number, id }) => {\n          return <Contact key={id} name={name} number={number} id={id} />;\n        })\n      ) : (\n        <H2>Contact list is empty</H2>\n      )}\n    </Container>\n  );\n}\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 4px;\n  margin-bottom: 16px;\n  svg {\n    color: #999;\n    cursor: pointer;\n  }\n`;\n\nexport const SearchInput = styled.input`\n  width: 200px;\n  padding: 8px 30px 8px 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  background-color: #fff;\n  outline: none;\n  transition: width 0.3s ease-in-out;\n\n  :focus {\n    cursor: text;\n    border: none;\n    border-bottom: 1px solid #999;\n  }\n`;\n","import React from 'react';\nimport { BiSearch, BiX } from 'react-icons/bi';\nimport { SearchInput, Label } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redax/filter/filterSlice';\nimport { selectFilterValue } from 'redax/filter/filterSelectors';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilterValue);\n\n  const handleFilterChange = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n\n  const resetFilter = () => {\n    dispatch(setFilter(''));\n  };\n\n  return (\n    <Label>\n      <SearchInput\n        value={filterValue}\n        type=\"text\"\n        placeholder=\"Search by names...\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        name=\"search\"\n        onChange={handleFilterChange}\n      />\n      {!filterValue && <BiSearch size=\"20\" />}\n      {filterValue && <BiX size=\"20\" onClick={resetFilter} />}\n    </Label>\n  );\n}\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nfunction Contacts() {\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n\nexport default Contacts;\n"],"names":["FormContainer","styled","Label","Icon","Button","Input","getContacts","state","contacts","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleInputChange","target","value","reset","onSubmit","event","preventDefault","newContact","some","contact","toLowerCase","Notify","position","info","background","addContactAsync","then","clickToClose","success","catch","size","onChange","type","pattern","title","required","ContactItem","DeleteBtn","modalRoot","document","querySelector","visible","onCancel","createPortal","open","footer","onClick","editContactAsync","id","timeout","e","isModalVisible","setIsModalVisible","contactId","deleteContactAsync","Container","H2","selectFilterValue","filter","selectFilteredContacts","createSelector","filterValue","includes","filteredcontacts","useEffect","fetchContactsAsync","length","map","SearchInput","placeholder","setFilter","currentTarget"],"sourceRoot":""}