{"version":3,"file":"static/js/276.b5b64096.chunk.js","mappings":"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","sources":["redax/contacts/contactSelectors.js","components/ContactForm/ContactForm.jsx","components/Contact/Сontact.styled.jsx","components/Modal/EditModal.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.jsx","redax/filter/filterSelectors.js","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.contacts;","import { useState } from 'react';\nimport { BsFillPersonFill, BsFillTelephoneFill } from 'react-icons/bs';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { addContactAsync } from 'redax/contacts/contactsOperetions';\nimport { getContacts } from 'redax/contacts/contactSelectors';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Heading,\n  Icon,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { formHeader, formLabel, hoverIcon, inputLeftEl } from 'theme';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleInputChange = ({ target }) => {\n    const { name, value } = target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const formSubmit = event => {\n    event.preventDefault();\n\n    const newContact = {\n      name,\n      number,\n    };\n\n    const isExist = contacts.some(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number\n    );\n\n    if (isExist) {\n      reset();\n      Notify.info(`${name} is already in contacts`, {\n        position: 'center-top',\n        info: {\n          background: '#738ddae4',\n        },\n      });\n      return;\n    }\n\n    dispatch(addContactAsync(newContact))\n      .then(() => {\n        Notify.success('Contact added successfully', {\n          position: 'center-top',\n          clickToClose: true,\n          success: {\n            background: '#9dbc89df',\n          },\n        });\n      })\n      .catch(() => {\n        Notify.failure('Somthing was wrong, try again', {\n          position: 'center-top',\n        });\n      });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={formSubmit}>\n      <Heading sx={formHeader}>Add contact</Heading>\n      <FormControl>\n        <FormLabel sx={formLabel}>Name</FormLabel>\n        <InputGroup sx={hoverIcon}>\n          <InputLeftElement sx={inputLeftEl}>\n            <Icon as={BsFillPersonFill} color=\"customColor.200\" />\n          </InputLeftElement>\n          <Input\n            variant=\"filled\"\n            value={name}\n            onChange={handleInputChange}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </InputGroup>\n      </FormControl>\n\n      <FormControl>\n        <FormLabel sx={formLabel}>Number</FormLabel>\n        <InputGroup sx={hoverIcon}>\n          <InputLeftElement sx={inputLeftEl}>\n            <Icon as={BsFillTelephoneFill} color=\"customColor.200\" />\n          </InputLeftElement>\n          <Input\n            variant=\"filled\"\n            value={number}\n            onChange={handleInputChange}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?[0-9\\s\\-\\(\\)]+\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </InputGroup>\n      </FormControl>\n\n      <Button variant=\"myBtn\" type=\"submit\">\n        Add contact\n      </Button>\n    </form>\n  );\n}\n","import { HStack } from '@chakra-ui/react';\nimport styled from '@emotion/styled';\n\nexport const ContactItem = styled(HStack)`\n  /* justify-content: space-around; */\n  padding: 12px;\n  padding-left: 20px;\n  color: #555;\n  -webkit-tap-highlight-color: transparent;\n\n  :hover {\n    background: #fff;\n    outline: none;\n    position: relative;\n    background-color: #fff;\n    border-top-left-radius: 20px;\n    border-bottom-left-radius: 20px;\n  }\n\n  :hover::after {\n    content: '';\n    position: absolute;\n    background-color: transparent;\n    bottom: 100%;\n    right: 0;\n    height: 35px;\n    width: 35px;\n    border-bottom-right-radius: 18px;\n    box-shadow: 0 20px 0 0 #fff;\n  }\n\n  :hover::before {\n    content: '';\n    position: absolute;\n    background-color: transparent;\n    top: 38px;\n    right: 0;\n    height: 35px;\n    width: 35px;\n    border-top-right-radius: 18px;\n    box-shadow: 0 -20px 0 0 #fff;\n  }\n  p {\n    /* width: 160px; */\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    font-size: 18px;\n  }\n\n  div {\n    display: flex;\n    gap: 12px;\n  }\n`;\n\n\n","// import { Button, Input, Modal } from 'antd';\nimport { Notify } from 'notiflix';\nimport { useState } from 'react';\nimport {\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Input,\n  FormControl,\n  FormLabel,\n} from '@chakra-ui/react';\nimport { createPortal } from 'react-dom';\nimport { useDispatch } from 'react-redux';\nimport { editContactAsync } from 'redax/contacts/contactsOperetions';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nfunction EditModal({ isOpen, onClose, contact }) {\n  const dispatch = useDispatch();\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n\n  const handleSave = () => {\n    if (name === '' || number === '') {\n      Notify.failure('Fields can not be empty. Please, enter some value', {\n        position: 'center-top',\n      });\n      return;\n    }\n\n    dispatch(editContactAsync({ id: contact.id, name, number }))\n      .then(() => {\n        Notify.success('Updated', {\n          position: 'center-top',\n          clickToClose: true,\n          timeout: 1500,\n          success: {\n            background: '#9dbc89df',\n          },\n        });\n      })\n      .catch(() => {\n        Notify.failure('Somthing was wrong, try again', {\n          position: 'center-top',\n        });\n      });\n    onClose();\n  };\n\n  return createPortal(\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay\n        bg=\"blackAlpha.300\"\n        backdropFilter=\"blur(2px) hue-rotate(90deg)\"\n      />\n      <ModalContent>\n        <ModalHeader>Edit Contact</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <FormControl>\n            <FormLabel>Name</FormLabel>\n            <Input\n              variant=\"filled\"\n              value={name}\n              onChange={e => setName(e.target.value)}\n            />\n          </FormControl>\n          <FormControl mt={4}>\n            <FormLabel>Number</FormLabel>\n            <Input\n              variant=\"filled\"\n              value={number}\n              onChange={e => setNumber(e.target.value)}\n            />\n          </FormControl>\n        </ModalBody>\n        <ModalFooter>\n          <Button variant='myBtn' mr={3} onClick={handleSave}>\n            Save\n          </Button>\n          <Button variant='myBtn' onClick={onClose}>Cancel</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>,\n    modalRoot\n  );\n}\n\nexport default EditModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { RiDeleteBin6Line, RiEdit2Line } from 'react-icons/ri';\nimport { ContactItem } from './Сontact.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContactAsync } from 'redax/contacts/contactsOperetions';\nimport { Notify } from 'notiflix';\nimport EditModal from 'components/Modal/EditModal';\nimport {  Box, IconButton, useDisclosure } from '@chakra-ui/react';\nimport { iconBtn } from 'theme';\n\nfunction Contact({ id, name, number }) {\n  const dispatch = useDispatch();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const removeContact = contactId => {\n    dispatch(deleteContactAsync(contactId))\n      .then(() => {\n        Notify.success('Deleted', {\n          position: 'center-top',\n          clickToClose: true,\n          timeout: 1500,\n          success: {\n            background: '#9dbc89df',\n          },\n        });\n      })\n      .catch(() => {\n        Notify.failure('Somthing was wrong, try again', {\n          position: 'center-top',\n        });\n      });\n  };\n\n\n  return (\n    <ContactItem spacing={{base: '12px', lg:'32px'}}\n      as='li' id={id}>\n      <Box as='p' w='240px'>{name}</Box>\n    \n      <Box as='p' w='240px' >{number}</Box>\n      \n        <div >\n        <IconButton size='xs' sx={iconBtn} aria-label='edit contact' type=\"button\" onClick={onOpen} icon={<RiEdit2Line />}/>\n          <IconButton size='xs' sx={iconBtn} aria-label='delete contact' type=\"button\" onClick={() => removeContact(id)} icon={<RiDeleteBin6Line />} />\n      </div>\n      \n        <EditModal isOpen={isOpen} onClose={onClose} contact={{id, name, number}} />\n      \n    </ContactItem>\n  );\n}\n\nexport default Contact;\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\n\nexport const H2 = styled.h2`\n  display: block;\n  text-align: center;\n  margin-bottom: 8px;\n  font-size: 24px;\n  color: #555;\n  cursor: default;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { getContacts } from 'redax/contacts/contactSelectors';\n\nexport const selectFilterValue = state => state.filter.filter.toLowerCase();\n\nexport const selectFilteredContacts = createSelector(\n  [getContacts, selectFilterValue],\n  (contacts, filterValue) =>\n    contacts.filter(contact => contact.name.toLowerCase().includes(filterValue))\n);\n","import React from 'react';\nimport { BiSearch, BiX } from 'react-icons/bi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redax/filter/filterSlice';\nimport { selectFilterValue } from 'redax/filter/filterSelectors';\nimport { Input, InputGroup } from '@chakra-ui/react';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilterValue);\n\n  const handleFilterChange = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n\n  const resetFilter = () => {\n    dispatch(setFilter(''));\n  };\n\n  return (\n    <InputGroup>\n      <Input\n        value={filterValue}\n        type=\"text\"\n        placeholder=\"Search by names...\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        name=\"search\"\n        onChange={handleFilterChange}\n      />\n      {!filterValue && <BiSearch size=\"20\" />}\n      {filterValue && <BiX size=\"20\" onClick={resetFilter} />}\n    </InputGroup>\n  );\n}\n\nexport default Filter;\n","import React from 'react';\nimport Contact from 'components/Contact/Contact';\nimport {  H2} from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redax/filter/filterSelectors';\nimport { useEffect } from 'react';\nimport { fetchContactsAsync } from 'redax/contacts/contactsOperetions';\nimport { Notify } from 'notiflix';\nimport Filter from 'components/Filter/Filter';\nimport { List } from '@chakra-ui/react';\nimport { contactList } from 'theme';\n\n\nfunction ContactList() {\n  const filteredcontacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContactsAsync()).catch(() => {\n      Notify.failure('Somthing was wrong, refresh the page', {\n        position: 'center-top',\n      });\n    });\n  }, [dispatch]);\n\n  return (\n    <List sx={contactList}>\n      <Filter/>\n      {filteredcontacts.length !== 0 ? (\n        filteredcontacts.map(({ name, number, id }) => {\n          return <Contact key={id} name={name} number={number} id={id} />;\n        })\n      ) : (\n        <H2>Contact list is empty</H2>\n      )}\n    </List>\n  );\n}\n\nexport default ContactList;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\n\nfunction Contacts() {\n  return (\n    <>\n      <ContactForm />\n      <ContactList />\n    </>\n  );\n}\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleInputChange","target","value","reset","onSubmit","event","preventDefault","newContact","some","contact","toLowerCase","Notify","position","info","background","addContactAsync","then","clickToClose","success","catch","sx","formHeader","formLabel","hoverIcon","inputLeftEl","as","BsFillPersonFill","color","I","variant","onChange","type","pattern","title","required","BsFillTelephoneFill","ContactItem","styled","HStack","modalRoot","document","querySelector","isOpen","onClose","createPortal","bg","backdropFilter","e","mt","mr","onClick","editContactAsync","id","timeout","useDisclosure","onOpen","spacing","base","lg","w","size","iconBtn","icon","contactId","deleteContactAsync","H2","selectFilterValue","filter","selectFilteredContacts","createSelector","filterValue","includes","placeholder","setFilter","currentTarget","filteredcontacts","useEffect","fetchContactsAsync","contactList","length","map"],"sourceRoot":""}